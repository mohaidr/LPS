self.onmessage=e=>{const{baseURL:t,refreshRate:o=5e3}=e.data,s=t?`${t}/api/metrics`:"/api/metrics",n=async()=>{try{console.log("EndPointsListWorker: Fetching data from API:",s);const e=await fetch(s);if(!e.ok)throw new Error("Network response was not ok");const t=(await e.json()).sort(((e,t)=>{const o={Ongoing:0,Scheduled:1,Paused:2,Completed:3,Failed:4,Cancelled:5,PendingExecution:6},s=e.ExecutionStatus||"Unknown",n=t.ExecutionStatus||"Unknown";return o[s]-o[n]})),o=t.every((e=>["Success","Failed","Cancelled","Terminated","Skipped"].includes(e.ExecutionStatus)));self.postMessage({data:t,allCompleted:o}),o&&(console.log("EndPointsListWorker: All endpoints are in terminal states. Stopping worker."),clearInterval(r),self.close())}catch(e){console.error("EndPointsListWorker error:","An error has occurred, and some tests either did not start or are still ongoing, so their terminal state cannot be identified. Data on this page will no longer be refreshed; please check the console or log file for details."),self.postMessage({error:"An error has occurred, and some tests either did not start or are still ongoing, so their terminal state cannot be identified. Data on this page will no longer be refreshed; please check the console or log file for details."}),clearInterval(r),self.close()}};n();const r=setInterval(n,o);self.onmessage=e=>{"terminate"===e.data&&(clearInterval(r),self.close())}};