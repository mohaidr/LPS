self.onmessage=e=>{const{baseURL:o,iterationId:t,refreshRate:s=5e3}=e.data,r=o?`${o}/api/metrics`:"/api/metrics",a=async()=>{try{console.log("DashboardWorker: Fetching data from API:",r);const s=await fetch(r);if(!s.ok)throw new Error("Network response was not ok");const a=(await s.json()).filter((e=>e.IterationId===t));if(a.length>0){var e,o;const t=a[0],s=t.ExecutionStatus,r=(null===(e=t.ConnectionMetrics)||void 0===e?void 0:e.RequestsCount)||0,l=(null===(o=t.ConnectionMetrics)||void 0===o?void 0:o.FailedRequestsCount)||0,i=r>0?(l/r*100).toFixed(2):0;self.postMessage({data:[t],errorRate:i}),["Completed","Failed","Cancelled"].includes(s)&&(console.log(`DashboardWorker: Status is ${s}. Stopping worker.`),clearInterval(n),self.close())}}catch(s){console.error("DashboardWorker error:",s),self.postMessage({error:s.message})}};a();const n=setInterval(a,s);self.onmessage=e=>{"terminate"===e.data&&(clearInterval(n),self.close())}};