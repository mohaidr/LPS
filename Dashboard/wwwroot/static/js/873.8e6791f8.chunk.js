self.onmessage=e=>{const{baseURL:t,refreshRate:s=5e3}=e.data,o=t?`${t}/api/metrics`:"/api/metrics",n=async()=>{try{console.log("EndPointsListWorker: Fetching data from API:",o);const e=await fetch(o);if(!e.ok)throw new Error("Network response was not ok");const t=(await e.json()).sort(((e,t)=>{const s={Ongoing:0,Scheduled:1,Paused:2,Completed:3,Failed:4,Cancelled:5,PendingExecution:6},o=e.ExecutionStatus||"Unknown",n=t.ExecutionStatus||"Unknown";return s[o]-s[n]})),s=t.every((e=>["Completed","Failed","Cancelled"].includes(e.ExecutionStatus)));self.postMessage({data:t,allCompleted:s}),s&&(console.log("EndPointsListWorker: All endpoints are in terminal states. Stopping worker."),clearInterval(a),self.close())}catch(e){console.error("EndPointsListWorker error:",e),self.postMessage({error:e.message})}};n();const a=setInterval(n,s);self.onmessage=e=>{"terminate"===e.data&&(clearInterval(a),self.close())}};