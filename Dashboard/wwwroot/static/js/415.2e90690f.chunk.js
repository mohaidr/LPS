self.onmessage=e=>{const{baseURL:o,runName:s,refreshRate:t=5e3}=e.data,r=o?`${o}/api/metrics`:"/api/metrics",a=async()=>{try{console.log("DashboardWorker: Fetching data from API:",r);const t=await fetch(r);if(!t.ok)throw new Error("Network response was not ok");const a=(await t.json()).filter((e=>e.Endpoint===s));if(a.length>0){var e,o;const s=a[0],t=s.ExecutionStatus,r=(null===(e=s.ConnectionMetrics)||void 0===e?void 0:e.RequestsCount)||0,l=(null===(o=s.ConnectionMetrics)||void 0===o?void 0:o.FailedRequestsCount)||0,i=r>0?(l/r*100).toFixed(2):0;self.postMessage({data:[s],errorRate:i}),["Completed","Failed","Cancelled"].includes(t)&&(console.log(`DashboardWorker: Status is ${t}. Stopping worker.`),clearInterval(n),self.close())}}catch(t){console.error("DashboardWorker error:",t),self.postMessage({error:t.message})}};a();const n=setInterval(a,t);self.onmessage=e=>{"terminate"===e.data&&(clearInterval(n),self.close())}};